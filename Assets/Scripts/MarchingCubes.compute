#pragma kernel March
#include "Assets/Includes/MarchTables.cginc"

static const int numThreads = 8;

struct Triangle {
    float3 vertexC;
    float3 vertexB;
    float3 vertexA;
};

AppendStructuredBuffer<Triangle> triangles;
RWStructuredBuffer<float> points;

float boundsSize;
float3 centre;
float spacing;

int numPointsPerAxis;
float isoLevel;

float3 interpolateVerts(float v1w, float3 v1pos, float v2w, float3 v2pos) {
    float t = (isoLevel - v1w) / (v2w - v1w);
    return v1pos + t * (v2pos-v1pos);
}

int indexFromCoord(int x, int y, int z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

float3 getPosOfID(int3 id) {
    return (float3)(centre + id * spacing - boundsSize / 2);
}

[numthreads(numThreads,numThreads,numThreads)]
void March (int3 id : SV_DispatchThreadID)
{   
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= numPointsPerAxis-1 || id.y >= numPointsPerAxis-1 || id.z >= numPointsPerAxis-1) {
        return;
    }

    // 8 corners of the current cube
    float cubeCorners[8] = {
        points[indexFromCoord(id.x, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z)],
        points[indexFromCoord(id.x + 1, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z)],
        points[indexFromCoord(id.x + 1, id.y + 1, id.z + 1)],
        points[indexFromCoord(id.x, id.y + 1, id.z + 1)]
    };

    int3 cubeIndexes[8] = {
        int3(id.x, id.y, id.z),
        int3(id.x + 1, id.y, id.z),
        int3(id.x + 1, id.y, id.z + 1),
        int3(id.x, id.y, id.z + 1),
        int3(id.x, id.y + 1, id.z),
        int3(id.x + 1, id.y + 1, id.z),
        int3(id.x + 1, id.y + 1, id.z + 1),
        int3(id.x, id.y + 1, id.z + 1)
    };



    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0] < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1] < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2] < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3] < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4] < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5] < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6] < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7] < isoLevel) cubeIndex |= 128;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i +=3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i+1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i+1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i+2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i+2]];

        Triangle tri;
        tri.vertexA = interpolateVerts(cubeCorners[a0], getPosOfID(cubeIndexes[a0]), cubeCorners[b0], getPosOfID(cubeIndexes[b0]));
        tri.vertexB = interpolateVerts(cubeCorners[a1], getPosOfID(cubeIndexes[a1]), cubeCorners[b1], getPosOfID(cubeIndexes[b1]));
        tri.vertexC = interpolateVerts(cubeCorners[a2], getPosOfID(cubeIndexes[a2]), cubeCorners[b2], getPosOfID(cubeIndexes[b2]));
        triangles.Append(tri);
    }


}
