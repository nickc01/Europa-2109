using System;
using System.Collections;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using UnityEngine.Rendering;

public class MeshGenerator : MonoBehaviour {

    static MeshGenerator _instance;
    public static MeshGenerator Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = GameObject.FindObjectOfType<MeshGenerator>();
            }
            return _instance;
        }
    }

    [SerializeField]
    Camera mainCamera;

    const int threadGroupSize = 8;

    [Header ("General Settings")]
    public MapGenerator densityGenerator;

    public bool fixedMapSize;
    [ConditionalHide (nameof (fixedMapSize), true)]
    public Vector3Int numChunks = Vector3Int.one;
    [ConditionalHide (nameof (fixedMapSize), false)]
    public Transform viewer;
    [ConditionalHide (nameof (fixedMapSize), false)]
    public float viewDistance = 30;

    [Space ()]
    public bool autoUpdateInEditor = true;
    public bool autoUpdateInGame = true;
    public ComputeShader shader;
    public Material mat;
    public bool generateColliders;

    [Header ("Voxel Settings")]
    public float isoLevel;
    public float boundsSize = 1;
    public Vector3 offset = Vector3.zero;

    [Range (2, 100)]
    public int numPointsPerAxis = 30;

    [Header ("Gizmos")]
    public bool showBoundsGizmo = true;
    public Color boundsGizmoCol = Color.white;

    GameObject chunkHolder;
    const string chunkHolderName = "Chunks Holder";
    List<Chunk> chunks = new List<Chunk>();
    Dictionary<Vector3Int, Chunk> existingChunks = new Dictionary<Vector3Int, Chunk>();
    HashSet<Vector3Int> chunkCoordsUsed = new HashSet<Vector3Int>();
    ConcurrentQueue<Chunk> recycleableChunks = new ConcurrentQueue<Chunk>();

    /*
             recycleableChunks = new Queue<Chunk> ();
        chunks = new List<Chunk> ();
        existingChunks = new Dictionary<Vector3Int, Chunk> ();
        chunkCoordsUsed = new HashSet<Vector3Int>();
     */

    bool runningUpdate = false;

    // Buffers

    //List<ComputeBuffer> unusedPointBuffers = new List<ComputeBuffer>();
    //List<ComputeBuffer> usedPointBuffers = new List<ComputeBuffer>();
    Queue<BufferSet> unusedBuffers = new Queue<BufferSet>();
    HashSet<BufferSet> usedBuffers = new HashSet<BufferSet>();

    List<Task> taskPool = new List<Task>();

    class BufferSet
    {
        public ComputeBuffer triangleBuffer;
        public ComputeBuffer pointsBuffer;
        public ComputeBuffer triCountBuffer;
    }

    bool settingsUpdated;

    void Awake () {
        if (Application.isPlaying && !fixedMapSize) {

            var oldChunks = FindObjectsOfType<Chunk> ();
            for (int i = oldChunks.Length - 1; i >= 0; i--) {
                Destroy (oldChunks[i].gameObject);
            }
        }
    }


    Queue<Chunk> chunkMeshesToRefresh = new Queue<Chunk>();

    async void FixedUpdate () {
        // Update endless terrain
        if (!runningUpdate && (Application.isPlaying && !fixedMapSize)) {
            runningUpdate = true;
            //Debug.Log("A");
            await Run();
            //Debug.Log("RUNNING UPDATE");
            //Task.Run(Run().ConfigureAwait(true));
        }

        if (settingsUpdated && !runningUpdate) {
            //RequestMeshUpdate ();
            runningUpdate = true;
            //Debug.Log("B");
            await Run();
            //Task.Run(Run().ConfigureAwait(true));
            settingsUpdated = false;
        }

        UpdateChunkCollider();
    }

    void UpdateChunkCollider()
    {
        if (chunkMeshesToRefresh.TryDequeue(out var chunk) && chunk.gameObject.activeSelf)
        {
            //chunk.meshCollider.sharedMesh = null;
            chunk.MainCollider.sharedMesh = chunk.Mesh;
            //Debug.Log("CHunk Updated");
        }
    }

    /*async Task ExecuteRun()
    {
        await Run().Confi
    }*/

    public async Task Run () {

        try
        {
            CreateBuffers();

            //Debug.Log("AA");
            if (fixedMapSize)
            {
                await InitChunks();
                UpdateAllChunks();

            }
            else
            {
                //Debug.Log("AB");
                //if (Application.isPlaying)
                //{
                    //Debug.Log("C");
                    await InitVisibleChunks();
                //}
            }

            // Release buffers immediately in editor
            if (!Application.isPlaying)
            {
                ReleaseBuffers();
            }
        }
        catch (Exception e)
        {
            Debug.LogException(e);
        }
        finally
        {
            //Debug.Log("FIN");
            runningUpdate = false;
        }

    }

    public async Task RequestMeshUpdate () {
        if ((Application.isPlaying && autoUpdateInGame) || (!Application.isPlaying && autoUpdateInEditor)) {
            await Run ();
        }
    }

    void InitVariableChunkStructures () {
        recycleableChunks = new ConcurrentQueue<Chunk> ();
        chunks = new List<Chunk> ();
        existingChunks = new Dictionary<Vector3Int, Chunk> ();
        chunkCoordsUsed = new HashSet<Vector3Int>();
    }


    List<Chunk> chunksToRender = new List<Chunk>();

    async Task InitVisibleChunks () {

        if (chunks==null) {
            return;
        }
        CreateChunkHolder ();

        Vector3 p = viewer.position;
        Vector3 ps = p / boundsSize;
        Vector3Int viewerCoord = new Vector3Int (Mathf.RoundToInt (ps.x), Mathf.RoundToInt (ps.y), Mathf.RoundToInt (ps.z));

        int maxChunksInView = Mathf.CeilToInt (viewDistance / boundsSize);
        float sqrViewDistance = viewDistance * viewDistance;

        taskPool.Clear();

        // Go through all existing chunks and flag for recyling if outside of max view dst
        for (int i = chunks.Count - 1; i >= 0; i--) {
            Chunk chunk = chunks[i];
            Vector3 centre = CentreFromCoord (chunk.Position);
            Vector3 viewerOffset = p - centre;
            Vector3 o = new Vector3 (Mathf.Abs (viewerOffset.x), Mathf.Abs (viewerOffset.y), Mathf.Abs (viewerOffset.z)) - Vector3.one * boundsSize / 2;
            float sqrDst = new Vector3 (Mathf.Max (o.x, 0), Mathf.Max (o.y, 0), Mathf.Max (o.z, 0)).sqrMagnitude;
            if (sqrDst > sqrViewDistance) {
                existingChunks.Remove(chunk.Position);
                chunkCoordsUsed.Remove(chunk.Position);
                chunks.RemoveAt(i);

                taskPool.Add(ChunkEnd(chunk));

                async Task ChunkEnd(Chunk chunk)
                {
                    await chunk.Uninit();
                    recycleableChunks.Enqueue(chunk);
                }
            }
        }


        //await Task.WhenAll(taskPool);
        //taskPool.Clear();
        //Debug.Log("STARTING VISIBLE CHECKS");
        //int vectorSize = System.Numerics.Vector<float>.Count;
        //System.Numerics.Vector.
        chunksToRender.Clear();

        for (int x = -maxChunksInView; x <= maxChunksInView; x++) {
            for (int y = -maxChunksInView; y <= maxChunksInView; y++) {
                for (int z = -maxChunksInView; z <= maxChunksInView; z++) {
                    Vector3Int coord = new Vector3Int (x, y, z) + viewerCoord;

                    /*if (existingChunks.ContainsKey (coord)) {
                        continue;
                    }*/

                    //Debug.Log("chunkCoordsUsed = " + chunkCoordsUsed);
                    if (chunkCoordsUsed.Contains(coord))
                    {
                        continue;
                    }

                    Vector3 centre = CentreFromCoord (coord);
                    Vector3 viewerOffset = p - centre;
                    Vector3 o = new Vector3 (Mathf.Abs (viewerOffset.x), Mathf.Abs (viewerOffset.y), Mathf.Abs (viewerOffset.z)) - Vector3.one * boundsSize / 2;
                    float sqrDst = new Vector3 (Mathf.Max (o.x, 0), Mathf.Max (o.y, 0), Mathf.Max (o.z, 0)).sqrMagnitude;

                    // Chunk is within view distance and should be created (if it doesn't already exist)
                    if (sqrDst <= sqrViewDistance) {

                        Bounds bounds = new Bounds (CentreFromCoord (coord), Vector3.one * boundsSize);
                        if (IsVisibleFrom (bounds, mainCamera)) {
                            /*if (recycleableChunks.Count > 0) {
                                Chunk chunk = recycleableChunks.Dequeue ();
                                chunk.coord = coord;
                                chunk.SetUp(mat, generateColliders, true);
                                existingChunks.Add (coord, chunk);
                                chunkCoordsUsed.Add(coord);
                                chunks.Add (chunk);
                                UpdateChunkMesh (chunk);
                            } else {
                                Chunk chunk = CreateChunk (coord);
                                chunk.coord = coord;
                                chunk.SetUp (mat, generateColliders, false);
                                existingChunks.Add (coord, chunk);
                                chunkCoordsUsed.Add(coord);
                                chunks.Add (chunk);
                                UpdateChunkMesh (chunk);
                            }*/

                            Chunk chunk;
                            bool cached = true;

                            if (!recycleableChunks.TryDequeue(out chunk))
                            {
                                cached = false;
                                chunk = CreateChunk(coord);
                            }

                            chunk.Position = coord;
                            existingChunks.Add(coord, chunk);
                            chunkCoordsUsed.Add(coord);
                            chunks.Add(chunk);

                            //Debug.Log("ADDING CHUNK");

                            taskPool.Add(setupAndUpdateChunk(chunk, cached));

                            async Task setupAndUpdateChunk(Chunk chunk, bool cached)
                            {
                                await chunk.Init(mat, generateColliders, cached);
                                //Debug.Log("UPDATING MESH");
                                chunksToRender.Add(chunk);
                            }
                        }
                    }

                }
            }
        }

        await Task.WhenAll(taskPool);

        foreach (var chunk in chunksToRender)
        {
            UpdateChunkMesh(chunk);
        }
    }

    Plane[] planeCache = new Plane[6];

    public bool IsVisibleFrom (Bounds bounds, Camera camera) {
        //Plane[] planes = GeometryUtility.CalculateFrustumPlanes (camera);
        GeometryUtility.CalculateFrustumPlanes(camera, planeCache);
        return GeometryUtility.TestPlanesAABB (planeCache, bounds);
    }

    Triangle[] triangleCache;
    ChunkPoint[] pointCache;

    public void UpdateChunkMesh (Chunk chunk) {
        Debug.Log("Updating Chunk Mesh");
        int numVoxelsPerAxis = numPointsPerAxis - 1;
        int numThreadsPerAxis = Mathf.CeilToInt (numVoxelsPerAxis / (float) threadGroupSize);
        float pointSpacing = boundsSize / (numPointsPerAxis - 1);

        Vector3Int coord = chunk.Position;
        Vector3 centre = CentreFromCoord (coord);

        Vector3 worldBounds = new Vector3 (numChunks.x, numChunks.y, numChunks.z) * boundsSize;

        var bufferSet = GetBufferSet();

        densityGenerator.Generate (bufferSet.pointsBuffer, numPointsPerAxis, boundsSize, worldBounds, centre, offset, pointSpacing);

        bufferSet.triangleBuffer.SetCounterValue (0);
        shader.SetBuffer (0, "points", bufferSet.pointsBuffer);
        shader.SetBuffer (0, "triangles", bufferSet.triangleBuffer);
        shader.SetInt ("numPointsPerAxis", numPointsPerAxis);
        shader.SetFloat ("isoLevel", isoLevel);

        shader.Dispatch (0, numThreadsPerAxis, numThreadsPerAxis, numThreadsPerAxis);

        // Get number of triangles in the triangle buffer
        ComputeBuffer.CopyCount (bufferSet.triangleBuffer, bufferSet.triCountBuffer, 0);
        int[] triCountArray = { 0 };
        bufferSet.triCountBuffer.GetData (triCountArray);
        int numTris = triCountArray[0];

        // Get triangle data from shader
        //Triangle[] tris = new Triangle[numTris];

        //AsyncGPUReadback.Request(bufferSet.triangleBuffer)

        //AsyncGPUReadback.

        bufferSet.triangleBuffer.GetData (triangleCache, 0, 0, numTris);

        //Point[] points = new Point[numPoints];



        int numPoints = numPointsPerAxis * numPointsPerAxis * numPointsPerAxis;
        bufferSet.pointsBuffer.GetData(pointCache, 0, 0, numPoints);

        if (chunk.points == null)
        {
            chunk.points = new ChunkPoint[numPoints];
        }

        Array.Copy(pointCache, chunk.points, numPoints);
        //System.Buffer.BlockCopy(pointCache, 0, chunk.points, 0, numPoints);


        /*int stride = 0;

        unsafe
        {
            stride = sizeof(Triangle);
        }*/


        /*for (int i = 0; i < numPoints; i++)
        {
            Debug.Log("Point = " + JsonUtility.ToJson(points[i]));
        }*/

        /*AsyncGPUReadback.Request(bufferSet.triangleBuffer,numTris * stride, 0, result =>
        {
            Debug.Log("ERROR = " + result.hasError);
            var tris = result.GetData<Triangle>();

            Mesh mesh = chunk.mesh;
            mesh.Clear();

            var vertices = new Vector3[numTris * 3];
            var meshTriangles = new int[numTris * 3];

            for (int i = 0; i < numTris; i++)
            {
                for (int j = 0; j < 3; j++)
                {
                    meshTriangles[i * 3 + j] = i * 3 + j;
                    vertices[i * 3 + j] = tris[i][j];
                }
            }
            mesh.vertices = vertices;
            mesh.triangles = meshTriangles;

            mesh.RecalculateNormals();

            ReturnBufferSet(bufferSet);
        });*/
        

        Mesh mesh = chunk.Mesh;
        mesh.Clear ();

        var vertices = new Vector3[numTris * 3];
        var meshTriangles = new int[numTris * 3];

        for (int i = 0; i < numTris; i++) {
            for (int j = 0; j < 3; j++) {
                meshTriangles[i * 3 + j] = i * 3 + j;
                vertices[i * 3 + j] = triangleCache[i][j];
            }
        }
        mesh.vertices = vertices;
        mesh.triangles = meshTriangles;

        mesh.RecalculateNormals ();
        //mesh.Optimize();

        chunk.OnPointsUpdate();

        chunkMeshesToRefresh.Enqueue(chunk);

        ReturnBufferSet(bufferSet);
    }

    public void UpdateAllChunks () {

        // Create mesh for each chunk
        foreach (Chunk chunk in chunks) {
            UpdateChunkMesh (chunk);
        }

    }

    void OnDestroy () {
        if (Application.isPlaying) {
            ReleaseBuffers ();
        }
    }

    void CreateBuffers () {
        int numPoints = numPointsPerAxis * numPointsPerAxis * numPointsPerAxis;
        //int numVoxelsPerAxis = numPointsPerAxis - 1;
        //int numVoxels = numVoxelsPerAxis * numVoxelsPerAxis * numVoxelsPerAxis;
        //int maxTriangleCount = numVoxels * 5;

        // Always create buffers in editor (since buffers are released immediately to prevent memory leak)
        // Otherwise, only create if null or if size has changed
        if (unusedBuffers.Count == 0/* || numPoints != unusedBuffers.Peek().pointsBuffer.count*/)
        {
            //ReleaseBuffers();
            ReturnBufferSet(GetBufferSet());
        }
        //if (!Application.isPlaying || (unusedBuffers.Count == 0 || numPoints != unusedBuffers.Peek().pointsBuffer.count)) {
            //if (Application.isPlaying) {
            //    ReleaseBuffers ();
            //}
            //ReturnBufferSet(GetBufferSet());
            //triangleBuffer = new ComputeBuffer (maxTriangleCount, sizeof (float) * 3 * 3, ComputeBufferType.Append);
            //pointsBuffer = new ComputeBuffer (numPoints, sizeof (float) * 4);
            //triCountBuffer = new ComputeBuffer (1, sizeof (int), ComputeBufferType.Raw);

        //}
    }

    void ReleaseBuffers () {
        /*if (triangleBuffer != null) {
            triangleBuffer.Release ();
            pointsBuffer.Release ();
            triCountBuffer.Release ();
        }*/
        foreach (var buffer in usedBuffers)
        {
            buffer.triangleBuffer.Release();
            buffer.pointsBuffer.Release();
            buffer.triCountBuffer.Release();
        }

        usedBuffers.Clear();

        for (int i = 0; i < unusedBuffers.Count; i++)
        {
            var buffer = unusedBuffers.Dequeue();
            buffer.triangleBuffer.Release();
            buffer.pointsBuffer.Release();
            buffer.triCountBuffer.Release();
        }
    }

    Vector3 CentreFromCoord (Vector3Int coord) {
        // Centre entire map at origin
        if (fixedMapSize) {
            Vector3 totalBounds = (Vector3) numChunks * boundsSize;
            return -totalBounds / 2 + (Vector3) coord * boundsSize + Vector3.one * boundsSize / 2;
        }

        return new Vector3 (coord.x, coord.y, coord.z) * boundsSize;
    }

    void CreateChunkHolder () {
        // Create/find mesh holder object for organizing chunks under in the hierarchy
        if (chunkHolder == null) {
            if (GameObject.Find (chunkHolderName)) {
                chunkHolder = GameObject.Find (chunkHolderName);
            } else {
                chunkHolder = new GameObject (chunkHolderName);
            }
        }
    }

    // Create/get references to all chunks
    async Task InitChunks () {
        CreateChunkHolder ();
        chunks = new List<Chunk> ();
        List<Chunk> oldChunks = new List<Chunk> (FindObjectsOfType<Chunk> ());

        taskPool.Clear();

        // Go through all coords and create a chunk there if one doesn't already exist
        for (int x = 0; x < numChunks.x; x++) {
            for (int y = 0; y < numChunks.y; y++) {
                for (int z = 0; z < numChunks.z; z++) {
                    Vector3Int coord = new Vector3Int (x, y, z);
                    bool chunkAlreadyExists = false;

                    // If chunk already exists, add it to the chunks list, and remove from the old list.
                    for (int i = 0; i < oldChunks.Count; i++) {
                        if (oldChunks[i].Position == coord) {
                            chunks.Add (oldChunks[i]);
                            oldChunks.RemoveAt (i);
                            chunkAlreadyExists = true;
                            break;
                        }
                    }


                    bool cached = true;
                    // Create new chunk
                    if (!chunkAlreadyExists) {
                        cached = false;
                        var newChunk = CreateChunk (coord);
                        chunks.Add (newChunk);
                    }

                    taskPool.Add(chunks[chunks.Count - 1].Init(mat, generateColliders, cached));
                }
            }
        }

        // Delete all unused chunks
        for (int i = 0; i < oldChunks.Count; i++) {
            taskPool.Add(oldChunks[i].Uninit());
        }

        await Task.WhenAll(taskPool);
    }

    Chunk CreateChunk (Vector3Int coord) {
        GameObject chunk = new GameObject ($"Chunk ({coord.x}, {coord.y}, {coord.z})");
        chunk.transform.parent = chunkHolder.transform;
        Chunk newChunk = chunk.AddComponent<Chunk> ();
        newChunk.Position = coord;
        //newChunk.gameObject.isStatic = true;
        return newChunk;
    }

    void OnValidate() {
        settingsUpdated = true;
    }

    BufferSet GetBufferSet()
    {
        if (unusedBuffers.TryDequeue(out var bufferSet))
        {
            usedBuffers.Add(bufferSet);
            return bufferSet;
        }
        else
        {
            var buffer = CreateBufferSet();
            usedBuffers.Add(buffer);
            return buffer;
        }
    }

    BufferSet CreateBufferSet()
    {
        //triangleBuffer = new ComputeBuffer(maxTriangleCount, sizeof(float) * 3 * 3, ComputeBufferType.Append);
        //pointsBuffer = new ComputeBuffer(numPoints, sizeof(float) * 4);
        //triCountBuffer = new ComputeBuffer(1, sizeof(int), ComputeBufferType.Raw);
        int numPoints = numPointsPerAxis * numPointsPerAxis * numPointsPerAxis;
        int numVoxelsPerAxis = numPointsPerAxis - 1;
        int numVoxels = numVoxelsPerAxis * numVoxelsPerAxis * numVoxelsPerAxis;
        int maxTriangleCount = numVoxels * 5;

        if (triangleCache == null)
        {
            triangleCache = new Triangle[maxTriangleCount];
            pointCache = new ChunkPoint[numPoints];
        }

        return new BufferSet
        {
            triangleBuffer = new ComputeBuffer(maxTriangleCount, sizeof(float) * 3 * 3, ComputeBufferType.Append),
            pointsBuffer = new ComputeBuffer(numPoints, sizeof(float) * 4),
            triCountBuffer = new ComputeBuffer(1, sizeof(int), ComputeBufferType.Raw)
        };

    }

    void ReturnBufferSet(BufferSet buffer)
    {
        usedBuffers.Remove(buffer);
        unusedBuffers.Enqueue(buffer);
    }

    static Queue<ChunkPoint[]> pointBufferCache = new Queue<ChunkPoint[]>();

    public static ChunkPoint[] GetChunkPointBuffer()
    {
        if (pointBufferCache.TryDequeue(out var buffer))
        {
            return buffer;
        }
        else
        {
            int numPoints = Instance.numPointsPerAxis * Instance.numPointsPerAxis * Instance.numPointsPerAxis;
            return new ChunkPoint[numPoints];
        }
    }

    public static void ReturnChunkPointBuffer(ChunkPoint[] buffer)
    {
        pointBufferCache.Enqueue(buffer);
    }

    struct Triangle {
#pragma warning disable 649 // disable unassigned variable warning
        public Vector3 a;
        public Vector3 b;
        public Vector3 c;

        public Vector3 this [int i] {
            get {
                switch (i) {
                    case 0:
                        return a;
                    case 1:
                        return b;
                    default:
                        return c;
                }
            }
        }
    }

    void OnDrawGizmos () {
        if (showBoundsGizmo) {
            Gizmos.color = boundsGizmoCol;

            List<Chunk> chunks = (this.chunks == null) ? new List<Chunk> (FindObjectsOfType<Chunk> ()) : this.chunks;
            foreach (var chunk in chunks) {
                Bounds bounds = new Bounds (CentreFromCoord (chunk.Position), Vector3.one * boundsSize);
                Gizmos.color = boundsGizmoCol;
                Gizmos.DrawWireCube (CentreFromCoord (chunk.Position), Vector3.one * boundsSize);
            }
        }
    }

}